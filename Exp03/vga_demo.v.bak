module vga_demo
(
    input CLOCK,RESET,
	 
	 output VGA_HSYNC, VGA_VSYNC,
	 output [15:0]VGAD,

);

    wire [10:0]TagU2;

    vga_basemod U2
	 (
		 .RESET( RESET ),
		 .iClock( {iClock[2],iClock[0]} ), // Main Clock , Vga Clock
		 .iEn( isEn ),
		 .iData( DataU1[15:0] ),
		 .VGA_HSYNC( VGA_HSYNC ), 
	    .VGA_VSYNC( VGA_VSYNC ),
       .VGAD( VGAD ),
		 .oTag( TagU2 )
	 );
	 
	 	 /************/
	 
	 reg [10:0]F2,F1;
	 always @ ( posedge iClock[2] or negedge RESET ) 
	     if( !RESET ) 
		      { F2,F1 } <= { 2'b00, 2'b00 } ; 
		  else 
		      { F2,F1 } <= { F1,TagU2 };
				
	  wire isL2H = (F2[10] == 0 && F1[10] == 1);

	  reg isA;
	  reg [9:0]CY;
	  
	  always @ ( posedge iClock[2] or negedge RESET )
	      if( !RESET )
			    begin isA <= 1'b0; CY <= 10'd0; end
			else if( isL2H )
			    begin isA <= ~isA; CY <= F2[9:0]; end

	  // ====================== //
		      
	  reg [5:0]i;
	  reg isB,isCall;
	  reg [23:0]D1;
	  
	  always @ ( posedge iClock[2] or negedge RESET )
	      if( !RESET )
			    begin
				     i <= 6'd0;
					  
					  { isB,isCall } <= { 1'b0,1'b0 };
					  { D1 } <= { 21'd0 };
				 end
		   else
			    case( i )
				 
				     0:
					  if( isA!=isB ) begin isB <= isA; i <= i + 1'b1; end
					  
					  1:
					  if( isDone ) begin isCall <= 1'b0; i <= 4'd0; end
					  else begin isCall <= 1'b1; D1 <= { 5'd0,CY,9'd0}; end
					  
				 endcase

endmodule
